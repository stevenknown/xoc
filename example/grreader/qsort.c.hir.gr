
//====---- Dump region '.program' ----====
region program @".program" () {

    var strcmp:i32:(func_decl);
    var printf:i8:(func_decl,readonly);
    var hook_cmp:i32:(func_decl);
    var hook_cmp2:i32:(func_decl);
    var swap:i8:(func_decl);
    var qsort:i8:(func_decl);
    var Node:mc<8>:();
    var qsort:i8:(func_decl);
    var test_qsort1:i8:(func_decl);
    var test_qsort2:i8:(func_decl);
    var main:i32:(func_decl);
    var swap:i8:(func_decl);
    var hook_cmp:i32:(func_decl);
    var hook_cmp2:i32:(func_decl);
    var DedicatedStringVar:str:(string("DedicatedVarBeRegardedAsString"));
    var _const_string_1:str:(string("%d "));
    var _const_string_2:str:(string("
After qsort 1
"));
    var _const_string_3:str:(string("xkey"));
    var _const_string_4:str:(string("color"));
    var _const_string_5:str:(string("void"));
    var _const_string_6:str:(string("static"));
    var _const_string_7:str:(string("while"));
    var _const_string_8:str:(string("%s, %d
"));
    var _const_string_9:str:(string("
After qsort 2
"));
    var _const_string_10:str:(string("
Main returned
"));
    //====---- Dump region 'qsort' ----====
    region func qsort (undefined,var base:*<1>:(),var nleft:i32:(),var nright:i32:(),var width:i32:(),var fhook_cmp:*<4>:()) {

        var lo:*<1>:();
        var hi:*<1>:();
        var x:i32:();
        var i:i32:();
        var ll:*<1>:();
        if (
            ge:bool 
                ld:i32 nleft, 
                ld:i32 nright)
        {
            return ;
        };
        st:*<1> lo = 
            add:*<1> 
                ld:*<1> base, 
                mul:i32 
                    ld:i32 width, 
                    ld:i32 nleft;
        st:*<1> hi = 
            add:*<1> 
                ld:*<1> base, 
                mul:i32 
                    ld:i32 width, 
                    div:i32 
                        add:i32 
                            ld:i32 nleft, 
                            ld:i32 nright, 0x2:i32;
        call $1:i8 = swap(
            ld:*<1> lo,
            ld:*<1> hi,
            ld:i32 width);
        st:i32 x = 
            ld:i32 nleft;
        st:*<1> lo = 
            add:*<1> 
                ld:*<1> base, 
                mul:i32 
                    ld:i32 width, 
                    ld:i32 nleft;
        st:i32 i = 
            add:i32 
                ld:i32 nleft, 0x1:i32;
        while (
            le:bool 
                ld:i32 i, 
                ld:i32 nright) {
            st:*<1> hi = 
                add:*<1> 
                    ld:*<1> base, 
                    mul:i32 
                        ld:i32 width, 
                        ld:i32 i;
            icall $2:i32 = 
                ld:*<4> fhook_cmp, (
                ld:*<1> lo,
                ld:*<1> hi);
            if (
                lt:bool 
                    $2:i32, 0x0:i32)
            {
                stpr $3:i32 = 
                    ld:i32 x;
                st:i32 x = 
                    add:i32 
                        ld:i32 x, 0x1:i32;
                st:*<1> ll = 
                    add:*<1> 
                        ld:*<1> base, 
                        mul:i32 
                            ld:i32 width, 
                            ld:i32 x;
                call $4:i8 = swap(
                    ld:*<1> ll,
                    ld:*<1> hi,
                    ld:i32 width);
            };
            stpr $5:i32 = 
                ld:i32 i;
            st:i32 i = 
                add:i32 
                    ld:i32 i, 0x1:i32;
        };
        st:*<1> hi = 
            add:*<1> 
                ld:*<1> base, 
                mul:i32 
                    ld:i32 width, 
                    ld:i32 x;
        call $6:i8 = swap(
            ld:*<1> lo,
            ld:*<1> hi,
            ld:i32 width);
        call $7:i8 = qsort(
            ld:*<1> base,
            ld:i32 nleft,
            sub:i32 
                ld:i32 x, 0x1:i32,
            ld:i32 width,
            ld:*<4> fhook_cmp);
        call $8:i8 = qsort(
            ld:*<1> base,
            add:i32 
                ld:i32 x, 0x1:i32,
            ld:i32 nright,
            ld:i32 width,
            ld:*<4> fhook_cmp);
        return ;
    };
    //====---- Dump region 'test_qsort1' ----====
    region func test_qsort1 () {

        var a:mc<40>:(array);
        var i:i32:();
        starray:i32:0:(dim[10]) = 
            lda a, (0x0:i32), 0x1:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x1:i32), 0x2:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x2:i32), 0x3:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x3:i32), 0x4:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x4:i32), 0x5:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x5:i32), 0x6:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x6:i32), 0x7:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x7:i32), 0x8:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x8:i32), 0x9:i32;
        starray:i32:0:(dim[10]) = 
            lda a, (0x9:i32), 0xa:i32;
        call $1:i8 = qsort(
            lda a,0x0:i32,0x9:i32,4:u32,
            lda hook_cmp);
        st:i32 i = 0x0:i32;
        while (
            lt:bool 
                ld:i32 i, 0xa:i32) {
            call $2:i8 = printf(
                lda _const_string_1,
                array:i32:0:(dim[10])
                    lda a, (
                    ld:i32 i));
            stpr $3:i32 = 
                ld:i32 i;
            st:i32 i = 
                add:i32 
                    ld:i32 i, 0x1:i32;
        };
        call $4:i8 = printf(
            lda _const_string_2);
        return ;
    };
    //====---- Dump region 'test_qsort2' ----====
    region func test_qsort2 () {

        var node:mc<40>:(array);
        var i:i32:();
        starray:*<1>:0:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x0:i32), 
            lda _const_string_3;
        starray:i32:4:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x0:i32), 0xa:i32;
        starray:*<1>:0:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x1:i32), 
            lda _const_string_4;
        starray:i32:4:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x1:i32), 0x3:i32;
        starray:*<1>:0:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x2:i32), 
            lda _const_string_5;
        starray:i32:4:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x2:i32), 0x4:i32;
        starray:*<1>:0:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x3:i32), 
            lda _const_string_6;
        starray:i32:4:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x3:i32), 0x5:i32;
        starray:*<1>:0:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x4:i32), 
            lda _const_string_7;
        starray:i32:4:(elemtype:mc<8>,dim[5]) = 
            lda node, (0x4:i32), 0x2:i32;
        call $1:i8 = qsort(
            lda node,0x0:i32,0x4:i32,8:u32,
            lda hook_cmp2);
        st:i32 i = 0x0:i32;
        while (
            lt:bool 
                ld:i32 i, 0x5:i32) {
            call $2:i8 = printf(
                lda _const_string_8,
                array:*<1>:0:(elemtype:mc<8>,dim[5])
                    lda node, (
                    ld:i32 i),
                array:i32:4:(elemtype:mc<8>,dim[5])
                    lda node, (
                    ld:i32 i));
            stpr $3:i32 = 
                ld:i32 i;
            st:i32 i = 
                add:i32 
                    ld:i32 i, 0x1:i32;
        };
        call $4:i8 = printf(
            lda _const_string_9);
        return ;
    };
    //====---- Dump region 'main' ----====
    region func main () {

        call $1:i8 = test_qsort1();
        call $2:i8 = test_qsort2();
        call $3:i8 = printf(
            lda _const_string_10);
        return 0x0:i32;
    };
    //====---- Dump region 'swap' ----====
    region func swap (undefined,var a:*<1>:(),var b:*<1>:(),var width:i32:()) {

        var temp:i8:();
        stpr $1:i32 = 
            ld:i32 width;
        st:i32 width = 
            sub:i32 
                ld:i32 width, 0x1:i32;
        while (
            ne:bool 
                $1:i32, 0x0:i32) {
            st:i8 temp = 
                ild:i8 
                    ld:*<1> a;
            stpr $2:*<1> = 
                ld:*<1> a;
            ist:i8 = 
                $2:*<1>,
                ild:i8 
                    ld:*<1> b;
            st:*<1> a = 
                add:*<1> 
                    ld:*<1> a, 1:u32;
            stpr $3:*<1> = 
                ld:*<1> b;
            ist:i8 = 
                $3:*<1>,
                ld:i8 temp;
            st:*<1> b = 
                add:*<1> 
                    ld:*<1> b, 1:u32;
            stpr $1:i32 = 
                ld:i32 width;
            st:i32 width = 
                sub:i32 
                    ld:i32 width, 0x1:i32;
        };
        return ;
    };
    //====---- Dump region 'hook_cmp' ----====
    region func hook_cmp (undefined,var a:*<1>:(),var b:*<1>:()) {

        return 
            sub:i32 
                ild:i32 
                    cvt:*<4> 
                        ld:*<1> a, 
                ild:i32 
                    cvt:*<4> 
                        ld:*<1> b;
    };
    //====---- Dump region 'hook_cmp2' ----====
    region func hook_cmp2 (undefined,var a:*<1>:(),var b:*<1>:()) {

        var pa:mc<8>:();
        var pb:mc<8>:();
        st:mc<8> pa = 
            ild:mc<8> 
                cvt:*<8> 
                    ld:*<1> a;
        st:mc<8> pb = 
            ild:mc<8> 
                cvt:*<8> 
                    ld:*<1> b;
        call $1:i32 = strcmp(
            ld:*<1> pa,
            ld:*<1> pb);
        return 
            $1:i32;
    };
}