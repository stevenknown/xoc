/*@
XOC Release License

Copyright (c) 2013-2014, Alibaba Group, All rights reserved.

    compiler@aliexpress.com

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Su Zhenyu nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

author: Su Zhenyu
@*/
#ifndef __IR_TO_DEX_H__
#define __IR_TO_DEX_H__

#define CONT_toplirlist(s)                    (s)->top_level_irlist
#define CONT_epilogirlist(s)                  (s)->epilog_ir_list
class IR2DexCtx {
public:
    //Top level of current ir list.
    //Because the top level of ir list must be IR_ST or IR_IST.
    //So store cannot be child node of IR.
    IR ** top_level_irlist;

    //Both of Post Dec/Inc will take side effects for base region
    //So we must append the side effect ST operation followed, and
    //record the side-effect ir as epilog of current statement.
    IR ** epilog_ir_list;
};


class Label2UINT : public
    HMap<LabelInfo const*, UINT, HashFuncBase2<LabelInfo const*> > {
public:
    Label2UINT(UINT bsize = 0) :
        HMap<LabelInfo const*, UINT,
            HashFuncBase2<LabelInfo const*> >(bsize) {}
    virtual ~Label2UINT() {}

    void set(LabelInfo const* li, UINT v)
    { HMap<LabelInfo const*, UINT,
            HashFuncBase2<LabelInfo const*> >::set(li, ++v); }

    UINT get(LabelInfo const* li, bool * find)
    { return HMap<LabelInfo const*, UINT,
            HashFuncBase2<LabelInfo const*> >::get(li, find) - 1; }
};


//Backfill data.
class BackFillData {
public:
    IR * ir;
    LIR * lir;
};


//Transformator from IR to LIR/DEX.
class IR2Dex {
protected:
    DexRegion * m_rg;
    DexRegionMgr * m_ru_mgr;
    TypeMgr * m_tm;
    TypeIndexRep * m_tr;
    DexFile * m_df;
    SMemPool * m_pool;
    Dex2IR * m_d2ir;
    List<BackFillData*> m_bf_list;
    Label2UINT m_lab2idx;
    Prno2Vreg * m_org_pr2v; //Original map prno -> vreg generated by dex2ir.
    Prno2Vreg * m_prno2v; //Map prno -> vreg after RA.
    Var2UINT * m_var2fieldid;

    void * xmalloc(UINT size)
    {
        ASSERTN(m_pool != nullptr, ("need pool!!"));
        void * p = smpoolMalloc(size, m_pool);
        ASSERT0(p);
        ::memset(p, 0, size);
        return p;
    }

    //Use outside pool to alloc memory. The pool will
    //be freed by caller.
    void * ymalloc(UINT size);
public:
    IR2Dex(IN Region * rg, IN DexFile * df)
    {
        ASSERT0(rg && df);
        m_rg = (DexRegion*)rg;
        m_ru_mgr = (DexRegionMgr*)rg->getRegionMgr();
        m_df = df;
        m_tm = rg->getTypeMgr();
        m_tr = ((DexRegion*)rg)->getTypeIndexRep();
        m_d2ir = ((DexRegion*)rg)->getDex2IR();
        m_prno2v = ((DexRegion*)rg)->getPrno2Vreg();
        m_org_pr2v = m_d2ir->getPR2Vreg();
        ASSERT0(m_org_pr2v);

        m_var2fieldid = m_rg->getVAR2Fieldid();
        m_lab2idx.init(getNearestPowerOf2(
                        MAX(4, rg->getBBList()->get_elem_count())));
        m_pool = smpoolCreate(16, MEM_COMM);
    }

    ~IR2Dex()
    { smpoolDelete(m_pool); }

    LIR * buildCmpBias(IN IR ** ir);
    LIR * buildInstanceOf(IN IR ** ir);
    LIR * buildMove(IN IR ** ir);
    LIR * buildMonitorEnter(IN IR ** ir);
    LIR * buildMonitorExit(IN IR ** ir);
    LIR * buildArrayLength(IN IR ** ir);
    LIR * buildThrow(IN IR ** ir);
    LIR * buildMoveException(IN IR ** ir);
    LIR * buildMoveResult(IN IR ** ir);
    LIR * buildCheckCast(IN IR ** ir);
    LIR * buildConstClass(IN IR ** ir);
    LIR * buildFilledNewArray(IN IR ** ir);
    LIR * buildFillArrayData(IN IR ** ir);
    LIR * buildArray(IN IR ** ir);
    LIR * buildNewArray(IN IR ** ir);
    LIR * buildBinRegLit(IN IR ** ir);
    LIR * buildBinRegReg(IN IR ** ir);
    LIR * buildBinOp(IN IR ** ir);
    LIR * buildIget(IN IR ** ir);
    LIR * buildCvt(IN IR ** ir);
    LIR * buildConstString(IN IR ** ir);
    LIR * buildConst(IN IR ** ir);
    LIR * buildSget(IN IR ** ir);
    LIR * buildSgetBasicTypeVar(IN IR ** ir);
    LIR * buildSgetObj(IN IR ** ir);
    LIR * buildSput(IN IR ** ir);
    LIR * buildNewInstance(IN IR ** ir);
    LIR * buildInvoke(IN IR ** ir);
    LIR * buildUniOp(IN IR ** ir);

    LIR * convertSwitch(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertBranch(bool is_truebr, MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertGoto(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertReturn(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertStoreVar(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertStorePR(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertStoreArray(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertIStore(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertCall(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convertICall(MOD IR ** ir, IN IR2DexCtx * cont);
    LIR * convert(MOD IR ** ir, IN IR2DexCtx * cont);
    void convert(IN IR * ir_list, OUT List<LIR*> & newlirs);

    void dump_output(List<LIR*> & newlirs, Prno2Vreg const& prno2v);
    enum LIR_JDT_Kind get_lir_ty(DATA_TYPE dt);

    UINT findFieldId(IR * ir, IR * objptr);
    Label2UINT * get_lab2idx() { return &m_lab2idx; }
    UINT get_vreg(UINT prno)
    {
        if (m_prno2v != nullptr) {
            bool find;
            return m_prno2v->get(prno, &find);
        }
        ASSERT0(m_org_pr2v);
        return m_org_pr2v->get(prno);
    }

    UINT get_vreg(IR * pr)
    {
        ASSERT0(pr->is_pr());
        return get_vreg(PR_no(pr));
    }

    inline bool is_pair(IR const* ir)
    { return m_tm->getByteSize(IR_dt(ir))== 8; }
    void reloc();
};
#endif
